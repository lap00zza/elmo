{"version":3,"sources":["elmo.js"],"names":["ElmoMissingParameter","message","name","Error","ElmoTypeNotAllowed","typeChecker","params","i","length","pTypes","indexOf","pValue","pName","join","Elmo","selector","elements","window","HTMLElement","document","querySelectorAll","className","classList","add","remove","eventType","listener","addEventListener","style","cssText","Object","keys","forEach","rule","hasAttribute","getAttribute","value","j","setAttribute","getAttr","setAttr","e","elmo"],"mappings":"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","file":"elmo.js","sourcesContent":["/**\r\n *  MIT License\r\n *\r\n *  Copyright (c) 2017 Jewel Mahanta\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"Software\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in all\r\n *  copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n *  SOFTWARE.\r\n */\r\n\r\n// TODO: switch to webpack later\r\n// TODO: maybe add a check to see if all reqd. params are present?\r\n\r\n/**\r\n * Represents a missing parameter error.\r\n * @extends {Error}\r\n */\r\nclass ElmoMissingParameter extends Error {\r\n  constructor (message) {\r\n    super()\r\n    this.name = 'Missing Parameter'\r\n    this.message = message\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a type not allowed error.\r\n * @extends {Error}\r\n */\r\nclass ElmoTypeNotAllowed extends Error {\r\n  constructor (message) {\r\n    super()\r\n    this.name = 'Type Not Allowed'\r\n    this.message = message\r\n  }\r\n}\r\n\r\n/**\r\n * This helper function is used to maintain type consistency.\r\n * @param {Array} params\r\n */\r\nfunction typeChecker (params) {\r\n  for (var i = 0; i < params.length; i++) {\r\n    if (params[i].pTypes.indexOf(typeof params[i].pValue) === -1) {\r\n      throw new ElmoTypeNotAllowed(params[i].pName + ' must be of these types: ' + params[i].pTypes.join())\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Represents Elmo!\r\n * @example\r\n * var divs = new Elmo('div')\r\n */\r\nclass Elmo {\r\n  /**\r\n   * @param {String|HTMLElement} selector\r\n   *    Must be a valid selector or a HTMLElement\r\n   * @returns {Elmo}\r\n   */\r\n  constructor (selector) {\r\n    this.elements = null\r\n    if (selector instanceof window.HTMLElement) {\r\n      this.elements = [selector]\r\n    } else {\r\n      this.elements = document.querySelectorAll(selector)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add a class to all the selected elements.\r\n   * @param {String} className\r\n   *    The name of the class to add.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.addClass('hello')\r\n   * @returns {Elmo}\r\n   */\r\n  addClass (className) {\r\n    typeChecker([\r\n      {pName: 'className', pTypes: ['string'], pValue: className}\r\n    ])\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].classList.add(className)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Remove a class to all the selected elements.\r\n   * @param {String} className\r\n   *    The name of the class to remove.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.removeClass('hello')\r\n   * @returns {Elmo}\r\n   */\r\n  removeClass (className) {\r\n    typeChecker([\r\n      {pName: 'className', pTypes: ['string'], pValue: className}\r\n    ])\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].classList.remove(className)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add a event listener to the selected elements.\r\n   * @param {String} eventType\r\n   *    The type of event you are listening to.\r\n   * @param {function} listener\r\n   *    The listener function that will be called when the event is\r\n   *    triggered.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.on('click', function () {\r\n     *      console.log(this)\r\n     * })\r\n   * @returns {Elmo}\r\n   */\r\n  on (eventType, listener) {\r\n    typeChecker([\r\n      {pName: 'eventType', pTypes: ['string'], pValue: eventType},\r\n      {pName: 'listener', pTypes: ['function'], pValue: listener}\r\n    ])\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].addEventListener(eventType, listener)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set style on the selected elements.\r\n   * @param {Object|String} style\r\n   *    The style object/string. If you pass a object, the keys should\r\n   *    be valid css properties and the values should be valid css\r\n   *    property values.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.css({background: 'pink', margin: '1px'})\r\n   * divs.css('color: blue; border: 1px solid black;')\r\n   * divs.css('') // this will clear all the styles\r\n   * @returns {Elmo}\r\n   */\r\n  css (style) {\r\n    typeChecker([\r\n      {pName: 'style', pTypes: ['object', 'string'], pValue: style}\r\n    ])\r\n\r\n    var cssText = ''\r\n\r\n    // using Object is preferred\r\n    if (typeof style === 'object') {\r\n      Object.keys(style).forEach(function (rule) {\r\n        cssText += rule + ': ' + style[rule] + ';'\r\n      })\r\n    } else if (typeof style === 'string') {\r\n      cssText = style\r\n    }\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].style.cssText = cssText\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Get the value of an attribute of the first element in the\r\n   * selected elements.\r\n   * @param {String} name - The name of the attribute to get.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.attr('class')\r\n   * @returns {String|null}\r\n   *    If the attribute exists, then the value is returned. If\r\n   *    the attribute does not exist, or there are no selected\r\n   *    elements, then null is returned.\r\n   */\r\n  getAttr (name) {\r\n    typeChecker([\r\n      {pName: 'name', pTypes: ['string'], pValue: name}\r\n    ])\r\n\r\n    // NOTE: since we are only acting on the first\r\n    // element, there is no point running it through\r\n    // a for loop.\r\n    if (this.elements.length >= 1 && this.elements[0].hasAttribute(name)) {\r\n      return this.elements[0].getAttribute(name)\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set an attribute of all the selected elements.\r\n   * @param name - The name of the attribute whose value has to be set.\r\n   * @param {String|Boolean} value - The value of the attribute to set.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.attr('awesome', 'oh! yeah')\r\n   * @throws {ElmoTypeNotAllowed}\r\n   *    If value is neither string nor boolean, this error is thrown.\r\n   */\r\n  setAttr (name, value) {\r\n    typeChecker([\r\n      {pName: 'name', pTypes: ['string'], pValue: name},\r\n      {pName: 'value', pTypes: ['string', 'boolean'], pValue: value}\r\n    ])\r\n\r\n    for (var j = 0; j < this.elements.length; j++) {\r\n      this.elements[j].setAttribute(name, value)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Syntactic sugar for {@link Elmo#getAttr} and {@link Elmo#setAttr}\r\n   * If only name is present, getAttr will be called. If name and\r\n   * value are both present, setAttribute will be called.\r\n   * @throws {ElmoMissingParameter}\r\n   *    If neither name or value is present, this exception will be thrown.\r\n   */\r\n  attr (name, value) {\r\n    if (name && !value) {\r\n      return this.getAttr(name)\r\n    } else if (name && value) {\r\n      this.setAttr(name, value)\r\n      return this\r\n    } else {\r\n      throw new ElmoMissingParameter('Parameter \"name\" should be present.')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This will act as the main interface for Elmo.\r\n * @param {String} selector\r\n * @example\r\n * elmo('div')\r\n * // Elmo {elements: NodeList()}\r\n * elmo('div').addClass('pink')\r\n * // Elmo {elements: NodeList()}\r\n * elmo('div').removeClass('blue').on('click', function () {\r\n *      console.log(this)\r\n * })\r\n * // Elmo {elements: NodeList()}\r\n * @returns {Elmo}\r\n */\r\nwindow.e = window.elmo = function (selector) {\r\n  return new Elmo(selector)\r\n}\r\n"]}