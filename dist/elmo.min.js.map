{"version":3,"sources":["elmo.js"],"names":["typeChecker","params","i","length","Error","pTypes","indexOf","_typeof","pValue","ElmoTypeNotAllowed","pName","join","ElmoMissingParameter","message","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","name","_this2","Elmo","elements","selector","window","HTMLElement","document","querySelectorAll","className","classList","add","remove","eventType","listener","addEventListener","style","cssText","keys","forEach","rule","hasAttribute","getAttribute","value","j","setAttribute","toString","arguments","undefined","_getAttr","_setAttr","key","dataset","dataObj","k","eKey","_getData","_setData","e"],"mappings":"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","file":"elmo.min.js","sourcesContent":["/**\r\n *  MIT License\r\n *\r\n *  Copyright (c) 2017 Jewel Mahanta\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"Software\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in all\r\n *  copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n *  SOFTWARE.\r\n */\r\n\r\n// TODO: switch to webpack later\r\n// TODO: maybe add a check to see if all reqd. params are present?\r\n\r\n/**\r\n * Represents a missing parameter error.\r\n * @extends {Error}\r\n */\r\nclass ElmoMissingParameter extends Error {\r\n  constructor (message) {\r\n    super()\r\n    this.name = 'Missing Parameter'\r\n    this.message = message\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a type not allowed error.\r\n * @extends {Error}\r\n */\r\nclass ElmoTypeNotAllowed extends Error {\r\n  constructor (message) {\r\n    super()\r\n    this.name = 'Type Not Allowed'\r\n    this.message = message\r\n  }\r\n}\r\n\r\n/**\r\n * This helper function is used to maintain type consistency.\r\n * @param {Array} params\r\n */\r\nfunction typeChecker (params) {\r\n  for (var i = 0; i < params.length; i++) {\r\n    if (params[i].pTypes.indexOf(typeof params[i].pValue) === -1) {\r\n      throw new ElmoTypeNotAllowed(params[i].pName + ' must be of these types: ' + params[i].pTypes.join())\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Represents Elmo!\r\n * @example\r\n * var divs = new Elmo('div')\r\n */\r\nclass Elmo {\r\n  /**\r\n   * @param {String|HTMLElement} selector\r\n   *    Must be a valid selector or a HTMLElement\r\n   * @returns {Elmo}\r\n   */\r\n  constructor (selector) {\r\n    this.elements = null\r\n    if (selector instanceof window.HTMLElement) {\r\n      this.elements = [selector]\r\n    } else {\r\n      this.elements = document.querySelectorAll(selector)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add a class to all the selected elements.\r\n   * @param {String} className\r\n   *    The name of the class to add.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.addClass('hello')\r\n   * @returns {Elmo}\r\n   */\r\n  addClass (className) {\r\n    typeChecker([\r\n      {pName: 'className', pTypes: ['string'], pValue: className}\r\n    ])\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].classList.add(className)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Remove a class to all the selected elements.\r\n   * @param {String} className\r\n   *    The name of the class to remove.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.removeClass('hello')\r\n   * @returns {Elmo}\r\n   */\r\n  removeClass (className) {\r\n    typeChecker([\r\n      {pName: 'className', pTypes: ['string'], pValue: className}\r\n    ])\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].classList.remove(className)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add a event listener to the selected elements.\r\n   * @param {String} eventType\r\n   *    The type of event you are listening to.\r\n   * @param {function} listener\r\n   *    The listener function that will be called when the event is\r\n   *    triggered.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.on('click', function () {\r\n     *      console.log(this)\r\n     * })\r\n   * @returns {Elmo}\r\n   */\r\n  on (eventType, listener) {\r\n    typeChecker([\r\n      {pName: 'eventType', pTypes: ['string'], pValue: eventType},\r\n      {pName: 'listener', pTypes: ['function'], pValue: listener}\r\n    ])\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].addEventListener(eventType, listener)\r\n    }\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set style on the selected elements.\r\n   * @param {Object|String} style\r\n   *    The style object/string. If you pass a object, the keys should\r\n   *    be valid css properties and the values should be valid css\r\n   *    property values.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs.css({background: 'pink', margin: '1px'})\r\n   * divs.css('color: blue; border: 1px solid black;')\r\n   * divs.css('') // this will clear all the styles\r\n   * @returns {Elmo}\r\n   */\r\n  css (style) {\r\n    typeChecker([\r\n      {pName: 'style', pTypes: ['object', 'string'], pValue: style}\r\n    ])\r\n\r\n    var cssText = ''\r\n\r\n    // using Object is preferred\r\n    if (typeof style === 'object') {\r\n      Object.keys(style).forEach(function (rule) {\r\n        cssText += rule + ': ' + style[rule] + ';'\r\n      })\r\n    } else if (typeof style === 'string') {\r\n      cssText = style\r\n    }\r\n\r\n    for (var i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].style.cssText = cssText\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Get the value of an attribute of the first element in the\r\n   * selected elements.\r\n   * @param {String} name - The name of the attribute to get.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs._getAttr('class')\r\n   * @returns {String|null}\r\n   *    If the attribute exists, then the value is returned. If\r\n   *    the attribute does not exist, or there are no selected\r\n   *    elements, then null is returned.\r\n   */\r\n  _getAttr (name) {\r\n    typeChecker([\r\n      {pName: 'name', pTypes: ['string'], pValue: name}\r\n    ])\r\n\r\n    // NOTE: since we are only acting on the first\r\n    // element, there is no point running it through\r\n    // a for loop.\r\n    if (this.elements.length >= 1 && this.elements[0].hasAttribute(name)) {\r\n      return this.elements[0].getAttribute(name)\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set an attribute of all the selected elements.\r\n   * @param {String} name - The name of the attribute whose value has to be set.\r\n   * @param {*} value - The value of the attribute to set.\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs._setAttr('awesome', 'oh! yeah')\r\n   */\r\n  _setAttr (name, value) {\r\n    typeChecker([\r\n      {pName: 'name', pTypes: ['string'], pValue: name}\r\n    ])\r\n\r\n    for (var j = 0; j < this.elements.length; j++) {\r\n      this.elements[j].setAttribute(name, value.toString())\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If only name is present, {@link Elmo#_getAttr} will be called. If name\r\n   * and value are both present, {@link Elmo#_setAttr} will be called.\r\n   * @param {String} name\r\n   * @param {*} value\r\n   * @throws {ElmoMissingParameter}\r\n   *    If neither name or value is present, this exception will be thrown.\r\n   */\r\n  attr (name, value = null) {\r\n    if (name && !value) {\r\n      return this._getAttr(name)\r\n    } else if (name && value) {\r\n      this._setAttr(name, value)\r\n      return this\r\n    } else {\r\n      throw new ElmoMissingParameter('Parameter \"name\" should be present.')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the value of a dataset of the first element in the\r\n   * selected elements.\r\n   * @param {String} key - The data key to get\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * divs._getData('hello')\r\n   * @returns {String|null}\r\n   */\r\n  _getData (key) {\r\n    typeChecker([\r\n      {pName: 'key', pTypes: ['string'], pValue: key}\r\n    ])\r\n\r\n    if (this.elements.length >= 1) {\r\n      return this.elements[0].dataset[key] || null\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set data on all the selected elements. _setData can either accept a\r\n   * single object parameter or 2 parameters - key and value.\r\n   * @param {String|Object} key\r\n   *    If this parameter is a string, this acts as the key. This is used\r\n   *    for storing data on the element. If this parameter is an object,\r\n   *    then value parameter is ignored. The keys and values within the\r\n   *    object will be used to set the data.\r\n   * @param {*} value\r\n   * @example\r\n   * var divs = new Elmo('div')\r\n   * // Using Object\r\n   * divs._setData({cats: 1, dogs: 12})\r\n   * // Using key and value\r\n   * divs._setData('mangoes', 134)\r\n   */\r\n  _setData (key, value = null) {\r\n    typeChecker([\r\n      {pName: 'key', pTypes: ['string', 'object'], pValue: key}\r\n    ])\r\n\r\n    if (typeof key === 'object') {\r\n      var dataObj = key\r\n      var keys = Object.keys(dataObj)\r\n      for (var j = 0; j < this.elements.length; j++) {\r\n        for (var k = 0; k < keys.length; k++) {\r\n          var eKey = keys[k]\r\n          this.elements[j].dataset[eKey] = dataObj[eKey].toString()\r\n        }\r\n      }\r\n    } else if (typeof key === 'string') {\r\n      for (var i = 0; i < this.elements.length; i++) {\r\n        this.elements[i].dataset[key] = value\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If only key is present, {@link Elmo#_getData} will be called. If key\r\n   * and value are both present, {@link Elmo#_setData} will be called.\r\n   * @param {String|Object} key\r\n   * @param {*} value\r\n   * @throws {ElmoMissingParameter}\r\n   *    If neither key or value is present, this exception will be thrown.\r\n   */\r\n  data (key, value = null) {\r\n    if (key && !value && typeof key === 'string') {\r\n      return this._getData(key)\r\n    } else if (key && !value && typeof key === 'object') {\r\n      this._setData(key)\r\n      return this\r\n    } else if (key && value) {\r\n      this._setData(key, value)\r\n      return this\r\n    } else {\r\n      throw ElmoMissingParameter('Parameter \"key\" must be present')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This will act as the main interface for Elmo.\r\n * @param {String} selector\r\n * @example\r\n * elmo('div')\r\n * // Elmo {elements: NodeList()}\r\n * elmo('div').addClass('pink')\r\n * // Elmo {elements: NodeList()}\r\n * elmo('div').removeClass('blue').on('click', function () {\r\n *      console.log(this)\r\n * })\r\n * // Elmo {elements: NodeList()}\r\n * @returns {Elmo}\r\n */\r\nwindow.e = window.elmo = function (selector) {\r\n  return new Elmo(selector)\r\n}\r\n"]}