{"version":3,"sources":["elmo.js"],"names":["Elmo","selector","_classCallCheck","this","elements","HTMLElement","document","querySelectorAll","className","i","length","classList","add","remove","eventType","listener","Error","addEventListener","style","cssText","_typeof","Object","keys","forEach","rule","elmo","window"],"mappings":"+kBA8BMA,gBAMF,SAAAA,EAAaC,GAST,OATkBC,gBAAAC,KAAAH,GALtBG,KAAAC,SAAA,KASQH,aAAoBI,YACpBF,KAAKC,UAAYH,GALzBE,KAAAC,SAAsBE,SAAAC,iBAAAN,GASXE,2DAGXK,GAUI,IAAK,IAAIC,EAAI,EAAGA,EAAIN,KAAKC,SAASM,OAAQD,IACtCN,KAAKC,SAASK,GAAGE,UAAUC,IAAIJ,GAEnC,OAAOL,yCADNK,GACD,IAAA,IAAAC,EAAO,EAAPA,EAAAN,KAAAC,SAAAM,OAAAD,IACHN,KAAAC,SAAAK,GAAAE,UAAAE,OAAAL,GAED,OAAAL,gCAcCW,EAAAC,GAiBG,GAAwB,mBAAbA,EAff,MAAA,IAAAC,MAAA,gCAkBI,IAAK,IAAIP,EAAI,EAAGA,EAAIN,KAAKC,SAASM,OAAQD,IACtCN,KAAKC,SAASK,GAAGQ,iBAAiBH,EAAWC,GAEjD,OAAOZ,iCAHPe,GACI,IAAAC,EAAKf,GAGZ,iBAAA,IAAAc,EAAA,YAAAE,QAAAF,IAoBOG,OAAOC,KAAKJ,GAAOK,QAAQ,SAAUC,GAlB7CL,GAAAK,EAAA,KAAAN,EAAAM,GAAA,MAqBgC,iBAAVN,IACdC,EAAUD,GAGd,IAAK,IAAIT,EAAI,EAAGA,EAAIN,KAAKC,SAASM,OAAQD,IACtCN,KAAKC,SAASK,GAAGS,MAAMC,QAAUA,EAGrC,OAAOhB,cAJPsB,KAAAC,OAAKD,KAAQ,SAAOxB,GAChB,OAAA,IAAAD,KAAAC","file":"elmo.min.js","sourcesContent":["/**\r\n *  MIT License\r\n *\r\n *  Copyright (c) 2017 Jewel Mahanta\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"Software\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in all\r\n *  copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n *  SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * Represents Elmo!\r\n * @example\r\n * var divs = new Elmo('div')\r\n */\r\nclass Elmo {\r\n    /**\r\n     * @param {String|HTMLElement} selector\r\n     *      Must be a valid selector or a HTMLElement\r\n     * @returns {Elmo}\r\n     */\r\n    constructor (selector){\r\n        /** @type {NodeList} */\r\n        this.elements = null\r\n\r\n        if (selector instanceof HTMLElement) {\r\n            this.elements = [selector]\r\n        } else {\r\n            this.elements = document.querySelectorAll(selector)\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Add a class to all the selected elements.\r\n     * @param {String} className\r\n     *      The name of the class to add.\r\n     * @example\r\n     * var divs = new Elmo('div')\r\n     * divs.addClass('hello')\r\n     * @returns {Elmo}\r\n     */\r\n    addClass(className) {\r\n        for (var i = 0; i < this.elements.length; i++) {\r\n            this.elements[i].classList.add(className)\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Remove a class to all the selected elements.\r\n     * @param {String} className\r\n     *      The name of the class to remove.\r\n     * @example\r\n     * var divs = new Elmo('div')\r\n     * divs.removeClass('hello')\r\n     * @returns {Elmo}\r\n     */\r\n    removeClass(className) {\r\n        for (var i = 0; i < this.elements.length; i++) {\r\n            this.elements[i].classList.remove(className)\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Add a event listener to the selected elements.\r\n     * @param {String} eventType\r\n     *      The type of event you are listening to.\r\n     * @param {function} listener\r\n     *      The listener function that will be called when the event is \r\n     *      triggered.\r\n     * @example\r\n     * var divs = new Elmo('div')\r\n     * divs.on('click', function () {\r\n     *      console.log(this)\r\n     * })\r\n     * @returns {Elmo}\r\n     */\r\n    on(eventType, listener) {\r\n        if (typeof listener !== 'function') {\r\n            throw new Error('Listener must be a function.')\r\n        }\r\n        for (var i = 0; i < this.elements.length; i++) {\r\n            this.elements[i].addEventListener(eventType, listener)\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Set style on the selected elements.\r\n     * @param {Object|String} style\r\n     *      The style object/string. If you pass a object, the keys should\r\n     *      be valid css properties and the values should be valid css\r\n     *      property values.\r\n     * @example\r\n     * var divs = new Elmo('div')\r\n     * divs.css({background: 'pink', margin: '1px'})\r\n     * divs.css('color: blue; border: 1px solid black;')\r\n     * divs.css('') // this will clear all the styles\r\n     * @returns {Elmo}\r\n     */\r\n    css(style) {\r\n        var cssText = ''\r\n\r\n        // using Object is preferred\r\n        if (typeof style === 'object') {\r\n            Object.keys(style).forEach(function (rule) {\r\n                cssText += rule + ': ' + style[rule] + ';'\r\n            })\r\n        } else if (typeof style === 'string') {\r\n            cssText = style\r\n        }\r\n\r\n        for (var i = 0; i < this.elements.length; i++) {\r\n            this.elements[i].style.cssText = cssText\r\n        }\r\n\r\n        return this\r\n    }\r\n}\r\n\r\n/**\r\n * This will act as the main interface for Elmo.\r\n * @param {String} selector\r\n * @example\r\n * elmo('div')\r\n * // Elmo {elements: NodeList()}\r\n * elmo('div').addClass('pink')\r\n * // Elmo {elements: NodeList()}\r\n * elmo('div').removeClass('blue').on('click', function () {\r\n *      console.log(this)\r\n * })\r\n * // Elmo {elements: NodeList()}\r\n * @returns {Elmo}\r\n */\r\nvar elmo = window.elmo = function (selector) {\r\n    return new Elmo(selector)\r\n}\r\n"]}